// <auto-generated />
using System;
using Cardofun.DataContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cardofun.DataContext.Migrations
{
    [DbContext(typeof(CardofunContext))]
    [Migration("20191012182654_AddingPublicIdToPhoto")]
    partial class AddingPublicIdToPhoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cardofun.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryIsoCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CountryIsoCode", "Name")
                        .IsUnique()
                        .HasFilter("[CountryIsoCode] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Continent", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.HasKey("Name");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Country", b =>
                {
                    b.Property<string>("IsoCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<string>("ContinentName");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("IsoCode");

                    b.HasIndex("ContinentName");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Language", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .HasMaxLength(60);

                    b.HasKey("Code");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.LanguageLevel", b =>
                {
                    b.Property<string>("LanguageCode");

                    b.Property<int>("UserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("LevelOfSpeaking");

                    b.HasKey("LanguageCode", "UserId");

                    b.ToTable("LanguageLevel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LanguageLevel");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsMain")
                        .IsUnique()
                        .HasFilter("[IsMain] = 1");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Introduction");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.LanguageLearningLevel", b =>
                {
                    b.HasBaseType("Cardofun.Domain.Models.LanguageLevel");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("LanguageLearningLevel");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.LanguageSpeakingLevel", b =>
                {
                    b.HasBaseType("Cardofun.Domain.Models.LanguageLevel");

                    b.HasIndex("UserId")
                        .HasName("IX_LanguageLevel_UserId1");

                    b.HasDiscriminator().HasValue("LanguageSpeakingLevel");
                });

            modelBuilder.Entity("Cardofun.Domain.Models.City", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryIsoCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Country", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cardofun.Domain.Models.Photo", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cardofun.Domain.Models.User", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cardofun.Domain.Models.LanguageLearningLevel", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.Language", "Language")
                        .WithMany("LanguageLearningLevels")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cardofun.Domain.Models.User", "User")
                        .WithMany("LanguagesTheUserLearns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cardofun.Domain.Models.LanguageSpeakingLevel", b =>
                {
                    b.HasOne("Cardofun.Domain.Models.Language", "Language")
                        .WithMany("LanguageSpeakingLevels")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("FK_LanguageLevel_Languages_LanguageCode1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cardofun.Domain.Models.User", "User")
                        .WithMany("LanguagesTheUserSpeaks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LanguageLevel_Users_UserId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
